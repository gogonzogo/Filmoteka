{"mappings":"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","sources":["src/js/movie-modal.js"],"sourcesContent":["import { getMovieInfo } from './API-requests.js';\n\nclass Queue {\n  constructor(id, title, genres, release_date, poster_path) {\n    this.id = id;\n    this.title = title;\n    this.genres = genres;\n    this.release_date = release_date;\n    this.poster_path = poster_path;\n  }\n}\n\nconst movieGallery = document.querySelector('.card-gallery');\nlet mylibID = \"\"\nlet mylibtitle = \"\"\nlet mylibgenres = \"\"\nlet mylibrelease_date = \"\"\nlet mylibposter_path = \"\"\nlet checkArrary = -1;\nlet checkclass;\nmovieGallery.addEventListener('click', e => {\n  //get movie id\n  const parent = e.target.closest('div');\n  const movieId = parent.getAttribute('data');\n  mylibID = movieId;\n  renderModal(movieId);\n});\n\nlet watchArray = [];\nlet queueArray = [];\nlet currentMovie;\nconst movieWatched = document.querySelector('#watchedButton');\nconst movieQueued = document.querySelector('#queuedButton');\nmovieWatched.addEventListener('click', watchedProcess)  \nmovieQueued.addEventListener('click', queueProcess)\n\n\nasync function renderModal(movieID) {\n  const modal = document.querySelector('.movie-modal__overlay');\n\n  //show modal\n  modal.classList.toggle('is-hidden');\n\n  //close modal\n  const closeBtn = document.querySelector('.close-button');\n  closeBtn.addEventListener('click', () => modal.classList.add('is-hidden'));\n\n  const movieName = document.querySelector('.movie-name');\n  const movieInfo = document.querySelector('.movie-info-block');\n  const moviePoster = document.querySelector('.modal-movie-poster');\n  const movieAbout = document.querySelector('.movie-about-description');\n\n  const movie = await getMovieInfo(movieID);\n\n  // round average vote like 7.5975\n  function roundVotes(vote) {\n    if (vote.toString().length > 3) {\n      return vote.toFixed(2);\n    } else return vote;\n  }\n\n  //movie info\n  movieName.textContent = movie.title;\n  moviePoster.src = `https://image.tmdb.org/t/p/w500/${movie.poster_path}`;\n\n  //movie details\n  movieInfo.innerHTML = `\n  <p class='movie-info'>Vote / Votes</p> <p><span class='modal-movie-rate'>${roundVotes(\n    movie.vote_average\n  )}</span> /  ${movie.vote_count}</p>\n  <p  class='movie-info'>Popularity</p> <p>${movie.popularity}</p>\n  <p  class='movie-info'>Original Title</p> <p>${movie.original_title.toUpperCase()}</p>\n  <p  class='movie-info'>Genre</p> <p>${movie.genres.map(\n    gen => ' ' + gen.name\n  )}</p>\n  `;\n\n  movieAbout.textContent = movie.overview;\n\n  mylibtitle = movie.title\nmylibgenres = movie.genres.map(gen => ' ' + gen.name)\nmylibrelease_date = movie.release_date\nmylibposter_path = movie.poster_path\n \n  const watchSet = (localStorage.getItem('watch') !== null);\n  if (watchSet) {\n    const getWatch = localStorage.getItem('watch')\n    watchArray = JSON.parse(getWatch)\n  \n  }else {\n    watchArray = []\n  }\n    const queueSet = (localStorage.getItem('queue') !== null);\n\n  if (queueSet) {\n    const getqueue = localStorage.getItem('queue')\n    queueArray = JSON.parse(getqueue)\n  } else {\n    queueArray = []\n  }\n  const watchresult = watchArray.findIndex(item=> item.id === mylibID )\n  if (watchresult !== -1) {\n    movieWatched.innerText = \"REMOVE FROM WATCHED\"\n    checkclass = movieWatched.matches('.add-to-queue');\n    if (checkclass) {\n      movieWatched.classList.toggle(\"add-to-queue\");\n      movieWatched.classList.toggle(\"add-to-watched\");\n    }\n  } else {\n    movieWatched.innerText = \"ADD TO WATCHED\"\n    checkclass = movieWatched.matches('.add-to-watched');\n\n    if (checkclass) {\n      movieWatched.classList.toggle(\"add-to-watched\");\n      movieWatched.classList.toggle(\"add-to-queue\");\n      \n    }\n  } ;\n\n  const queueresult = queueArray.findIndex(item=> item.id === mylibID )\n \n  if (queueresult !== -1) {\n    movieQueued.innerText = \"REMOVE FROM QUEUE\" \n    checkclass = movieQueued.matches('.add-to-queue');\n    if (checkclass) {\n      movieQueued.classList.toggle(\"add-to-queue\");\n      movieQueued.classList.toggle(\"add-to-watched\");\n    }\n   } else {\n    movieQueued.innerText = \"ADD TO QUEUE\"\n     checkclass = movieQueued.matches('.add-to-watched');\n\n    if (checkclass) {\n      movieQueued.classList.toggle(\"add-to-queue\");\n      movieQueued.classList.toggle(\"add-to-watched\");\n    }\n\n  };\n\n}\n\n\nfunction queueProcess() {\n  const queueSet = (localStorage.getItem('queue') !== null);\n   if (queueSet) {\n    const getqueue = localStorage.getItem('queue')\n   queueArray = JSON.parse(getqueue)\n     \n\n   } else {\n     queueArray = []\n   }\n\n  checkArrary = queueArray.findIndex(item=> item.id === mylibID )\n  if (checkArrary === -1) {\n   const queue = new Queue(mylibID, mylibtitle, mylibgenres, mylibrelease_date, mylibposter_path)\nqueueArray.push(queue)\n    localStorage.setItem('queue', JSON.stringify(queueArray))\n    movieQueued.innerText = \"REMOVE FROM QUEUE\"\n    checkclass = movieQueued.matches('.add-to-queue');\n    if (checkclass) {\n      movieQueued.classList.toggle(\"add-to-queue\");\n      movieQueued.classList.toggle(\"add-to-watched\");\n    }\n  \n  } else {\n     queueArray.splice(checkArrary, 1)\n        localStorage.setItem('queue', JSON.stringify(queueArray))\n    movieQueued.innerText = \"ADD TO QUEUE\"\n     checkclass = movieQueued.matches('.add-to-watched');\n\n    if (checkclass) {\n      movieQueued.classList.toggle(\"add-to-queue\");\n      movieQueued.classList.toggle(\"add-to-watched\");\n    }\n      }\n    }\n  \n\nfunction watchedProcess() {\n     const queueSet = (localStorage.getItem('watch') !== null);\n   if (queueSet) {\n    const getwatch = localStorage.getItem('watch')\n   watchArray = JSON.parse(getwatch)\n     \n\n   } else {\n     watchArray = []\n   }\nconsole.log(watchArray)\n  checkArrary = watchArray.findIndex(item => item.id === mylibID)\n  console.log(checkArrary)\n  if (checkArrary === -1) {\n    const queue = new Queue(mylibID, mylibtitle, mylibgenres, mylibrelease_date, mylibposter_path)\n    console.log\nwatchArray.push(queue)\n    localStorage.setItem('watch', JSON.stringify(watchArray))\n    movieWatched.innerText = \"REMOVE FROM WATCHED\"\ncheckclass = movieWatched.matches('.add-to-queue');\n    if (checkclass) {\n      movieWatched.classList.toggle(\"add-to-queue\");\n      movieWatched.classList.toggle(\"add-to-watched\");\n    }\n    \n  \n  } else {\n     watchArray.splice(checkArrary, 1)\n        localStorage.setItem('watch', JSON.stringify(watchArray))\n    movieWatched.innerText = \"ADD TO WATCHED\"\n     checkclass = movieWatched.matches('.add-to-watched');\n\n    if (checkclass) {\n      movieWatched.classList.toggle(\"add-to-queue\");\n      movieWatched.classList.toggle(\"add-to-watched\");\n    }\n      }\n    }\n"],"names":["$bpxeT","parcelRequire","$8659643f5d4aff8d$var$Queue","Queue","id","title","genres","release_date","poster_path","this","$8659643f5d4aff8d$var$movieGallery","document","querySelector","$8659643f5d4aff8d$var$mylibID","$8659643f5d4aff8d$var$mylibtitle","$8659643f5d4aff8d$var$mylibgenres","$8659643f5d4aff8d$var$mylibrelease_date","$8659643f5d4aff8d$var$mylibposter_path","$8659643f5d4aff8d$var$checkArrary","addEventListener","e","movieId","target","closest","getAttribute","movieID","$8659643f5d4aff8d$var$_renderModal","apply","arguments","$8659643f5d4aff8d$var$renderModal","$8659643f5d4aff8d$var$watchArray","$8659643f5d4aff8d$var$queueArray","$8659643f5d4aff8d$var$movieWatched","$8659643f5d4aff8d$var$movieQueued","$parcel$interopDefault","$2TvXO","mark","_callee","modal","movieName","movieInfo","moviePoster","movieAbout","movie","roundVotes","getWatch","getqueue","vote","toString","length","toFixed","classList","toggle","add","$5kFwL","getMovieInfo","_ctx","sent","textContent","src","concat","innerHTML","vote_average","vote_count","popularity","original_title","toUpperCase","map","gen","name","overview","localStorage","getItem","JSON","parse","findIndex","item","innerText","matches","getwatch","console","log","queue","push","setItem","stringify","splice"],"version":3,"file":"index.9c9ed0f1.js.map"}