{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SCAAD,EAAAC,EAAA,SAEO,SAASC,EAAeC,IAG/BC,eAA2BC,GACzB,MAAMC,EAAQC,SAASC,cAAc,yBAGrCF,EAAMG,UAAUC,OAAO,aAGNH,SAASC,cAAc,iBAC/BG,iBAAiB,SAAS,IAAML,EAAMG,UAAUG,IAAI,eAE7D,MAAMC,EAAYN,SAASC,cAAc,eACnCM,EAAYP,SAASC,cAAc,qBACnCO,EAAcR,SAASC,cAAc,uBACrCQ,EAAaT,SAASC,cAAc,4BAEpCS,QAAc,EAAAjB,EAAAkB,cAAab,GAIjC,SAASc,EAAWC,GAClB,OAAIA,EAAKC,WAAWC,OAAS,EACpBF,EAAKG,QAAQ,GACRH,C,CANhBI,QAAQC,IAAIR,GAUZJ,EAAUa,YAAcT,EAAMU,MAC9BZ,EAAYa,IAAM,uCAAuCX,EAAMY,cAG/Df,EAAUgB,UAAY,gFACqDX,EACzEF,EAAMc,2BACOd,EAAMe,8DACsBf,EAAMgB,kEACFhB,EAAMiB,eAAeC,4DAC9BlB,EAAMmB,OAAOC,KACjDC,GAAO,IAAMA,EAAIC,iBAInBvB,EAAWU,YAAcT,EAAMuB,Q,CA3C/BC,CAAYtC,EAAUuC,G,CCHxB,IAAAC,EAAe,CACX,CACED,GAAI,GACJH,KAAM,UAER,CACEG,GAAI,GACJH,KAAM,aAER,CACEG,GAAI,GACJH,KAAM,aAER,CACEG,GAAI,GACJH,KAAM,UAER,CACEG,GAAI,GACJH,KAAM,SAER,CACEG,GAAI,GACJH,KAAM,eAER,CACEG,GAAI,GACJH,KAAM,SAER,CACEG,GAAI,MACJH,KAAM,UAER,CACEG,GAAI,GACJH,KAAM,WAER,CACEG,GAAI,GACJH,KAAM,WAER,CACEG,GAAI,GACJH,KAAM,UAER,CACEG,GAAI,MACJH,KAAM,SAER,CACEG,GAAI,KACJH,KAAM,WAER,CACEG,GAAI,MACJH,KAAM,WAER,CACEG,GAAI,IACJH,KAAM,mBAER,CACEG,GAAI,MACJH,KAAM,YAER,CACEG,GAAI,GACJH,KAAM,YAER,CACEG,GAAI,MACJH,KAAM,OAER,CACEG,GAAI,GACJH,KAAM,YFpEZ,MAAMK,EAAYrC,SAASC,cAAc,iBAKdJ,YAiC3BA,eAA0ByC,GAEjBA,EAAOR,KAAKpB,IACjB,MAAM6B,EAAOvC,SAASwC,cAAc,kBACpCD,EAAKrC,UAAUG,IAAI,cACnBkC,EAAKhB,UACH,iDAAiDb,EAAMY,uJAGnCZ,EAAMU,2GA/BhC,SAAmBqB,EAAWC,GAC5B,MAAMC,EAAkBD,EAASZ,KAAIc,GACrBH,EAAUI,MAAKC,GAAQA,EAAKX,KAAOS,IAEpCZ,OAYf,OATYW,EAAgBI,QAAO,CAACC,EAAKC,EAAOC,EAAOC,IACjDA,EAAIpC,OAAS,EACT,GAAGoC,EAAI,OAAOA,EAAI,KAElBA,EAAIC,KAAK,O,CAuBKC,CAAUjB,EAAW1B,EAAM4C,wHAG3B,IAAIC,KAAK7C,EAAM8C,cAAcC,kEAGnDpB,EAAUqB,YAAYnB,GACtBA,EAAKnC,iBAAiB,SAAS,IAAMT,EAAee,IAAO,G,CAhD7DiD,QAHmB,EAAAlE,EAAAmE,qBAAoB,IAEpBC,KAAKC,QACP,EAInBC","sources":["src/js/movie-gallery.js","src/js/movie-modal.js","src/js/genre-list.js"],"sourcesContent":["import { fetchTrendingMovies, getMovieInfo } from './API-requests.js';\nimport { showMovieModal } from './movie-modal.js';\nimport genreList from './genre-list.js';\n\n\n\n// DOM elements\nconst movieList = document.querySelector(\".card-gallery\");\n\n\n\n// fuction that returns trending movies \nconst showTrendingMovies = async () => {\n  const list = await fetchTrendingMovies(1);\n  // console.log(list.data.results)\n  const movie = list.data.results;\n  renderInfo(movie)\n}\n\n\nshowTrendingMovies();\n\n//Function to get genre names\nfunction getGenres(genreList, genreIds) {\n  const arrOfGenresName = genreIds.map(currentId => {\n    const genre = genreList.find(elem => elem.id === currentId);\n\n    return genre.name;\n  });\n\n  const str = arrOfGenresName.reduce((acc, genre, index, arr) => {\n    if (arr.length > 2) {\n      acc = `${arr[0]}, ${arr[1]}`;\n    } else {\n      acc = arr.join(', ');\n    }\n\n    return acc;\n  });\n  return str;\n}\n\n\n\n// function that renders movie info to the dom\nasync function renderInfo(movies) {\n  // const genre = await getMovieInfo();\n  return movies.map((movie) => {\n    const card = document.createElement(\"div.movie-card\")\n    card.classList.add('movie-card');\n    card.innerHTML =\n      `<img src=\"https://image.tmdb.org/t/p/original/${movie.poster_path}\" class=\"movie-poster\"/>\n                <ul class=\"movie_info\">\n                    <li class=\"movie_title\">\n                        ${movie.title}\n                    </li>\n                    <li class=\"movie_genre\">\n                        ${getGenres(genreList, movie.genre_ids)};\n                    </li>\n                    <li class=\"movie_release-date\">\n                        ${new Date(movie.release_date).getFullYear()}\n                    </li>\n                </ul>`;\n    movieList.appendChild(card);\n    card.addEventListener('click', () => showMovieModal(movie));\n  });\n}\n\n\n// const showMovieCard = (movies) => {\n//     const \n// }","import { getMovieInfo } from './API-requests.js';\n\nexport function showMovieModal(movieData) {\n  renderModal(movieData.id);\n}\nasync function renderModal(movieID) {\n  const modal = document.querySelector('.movie-modal__overlay');\n\n  //show modal\n  modal.classList.toggle('is-hidden');\n\n  //close modal\n  const closeBtn = document.querySelector('.close-button');\n  closeBtn.addEventListener('click', () => modal.classList.add('is-hidden'));\n\n  const movieName = document.querySelector('.movie-name');\n  const movieInfo = document.querySelector('.movie-info-block');\n  const moviePoster = document.querySelector('.modal-movie-poster');\n  const movieAbout = document.querySelector('.movie-about-description');\n\n  const movie = await getMovieInfo(movieID);\n  console.log(movie);\n\n  // round average vote like 7.5975\n  function roundVotes(vote) {\n    if (vote.toString().length > 3) {\n      return vote.toFixed(2);\n    } else return vote;\n  }\n  \n  //movie info\n  movieName.textContent = movie.title;\n  moviePoster.src = `https://image.tmdb.org/t/p/original/${movie.poster_path}`;\n\n  //movie details\n  movieInfo.innerHTML = `\n  <p class='movie-info'>Vote / Votes</p> <p><span class='modal-movie-rate'>${roundVotes(\n    movie.vote_average\n  )}</span> /  ${movie.vote_count}</p>\n  <p  class='movie-info'>Popularity</p> <p>${movie.popularity}</p>\n  <p  class='movie-info'>Original Title</p> <p>${movie.original_title.toUpperCase()}</p>\n  <p  class='movie-info'>Genre</p> <p>${movie.genres.map(\n    gen => ' ' + gen.name\n  )}</p>\n  `;\n\n  movieAbout.textContent = movie.overview;\n}\n","export default [\n    {\n      id: 28,\n      name: 'Action',\n    },\n    {\n      id: 12,\n      name: 'Adventure',\n    },\n    {\n      id: 16,\n      name: 'Animation',\n    },\n    {\n      id: 35,\n      name: 'Comedy',\n    },\n    {\n      id: 80,\n      name: 'Crime',\n    },\n    {\n      id: 99,\n      name: 'Documentary',\n    },\n    {\n      id: 18,\n      name: 'Drama',\n    },\n    {\n      id: 10751,\n      name: 'Family',\n    },\n    {\n      id: 14,\n      name: 'Fantasy',\n    },\n    {\n      id: 36,\n      name: 'History',\n    },\n    {\n      id: 27,\n      name: 'Horror',\n    },\n    {\n      id: 10402,\n      name: 'Music',\n    },\n    {\n      id: 9648,\n      name: 'Mystery',\n    },\n    {\n      id: 10749,\n      name: 'Romance',\n    },\n    {\n      id: 878,\n      name: 'Science Fiction',\n    },\n    {\n      id: 10770,\n      name: 'TV Movie',\n    },\n    {\n      id: 53,\n      name: 'Thriller',\n    },\n    {\n      id: 10752,\n      name: 'War',\n    },\n    {\n      id: 37,\n      name: 'Western',\n    },\n  ];"],"names":["$5q1tW","parcelRequire","$4281cb08e8defb2a$export$87ab7537a92ac478","movieData","async","movieID","modal","document","querySelector","classList","toggle","addEventListener","add","movieName","movieInfo","moviePoster","movieAbout","movie","getMovieInfo","roundVotes","vote","toString","length","toFixed","console","log","textContent","title","src","poster_path","innerHTML","vote_average","vote_count","popularity","original_title","toUpperCase","genres","map","gen","name","overview","$4281cb08e8defb2a$var$renderModal","id","$2e77ca5c11e47559$export$2e2bcd8739ae039","$103e7e6c9cd8a571$var$movieList","movies","card","createElement","genreList1","genreIds","arrOfGenresName","currentId","find","elem","reduce","acc","genre","index","arr","join","$103e7e6c9cd8a571$var$getGenres","genre_ids","Date","release_date","getFullYear","appendChild","$103e7e6c9cd8a571$var$renderInfo","fetchTrendingMovies","data","results","$103e7e6c9cd8a571$var$showTrendingMovies"],"version":3,"file":"index.3840b9ce.js.map"}